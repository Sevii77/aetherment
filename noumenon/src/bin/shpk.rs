use std::collections::BTreeSet;

fn main() {
	let mut args = std::env::args();
	if args.len() != 3 {
		println!("Usage: shpk GAME_DIR PATH_LIST");
		println!("\tPATH_LIST: Newline seperated list txt (https://rl2.perchbird.dev/download/CurrentPathList.gz)");
		return;
	}
	
	_ = args.next();
	let noumenon = noumenon::get_noumenon(args.next()).expect("Game dir was invalid");
	let paths = std::fs::read_to_string(args.next().unwrap()).expect("Path list was invalid");
	
	let mut params = BTreeSet::new();
	for path in paths.split("\n") {
		if !path.ends_with(".shpk") {continue}
		
		// println!("{path}");
		let Ok(data) = noumenon.file::<Vec<u8>>(path) else {continue};
		let mut pos = 0;
		loop {
			let Some(start) = data[pos..].into_iter().position(|v| *v == b'g') else {break};
			if data[pos + start + 1] != b'_' {
				pos += start + 2;
				continue;
			}
			
			let Some(end) = data[pos + start + 2..].into_iter().position(|v| *v == 0) else {break};
			if let Ok(v) = str::from_utf8(&data[pos + start..pos + start + 2 + end]) {
				let v = v.split(".").next().unwrap().to_string();
				if v.len() > 6 && v.is_ascii() {
					params.insert(v);
				}
			}
			
			pos += start + 2 + end + 1;
		}
	}
	
	println!("{params:#?}");
	// "g_AmbientExtra",
	// "g_AmbientParam",
	// "g_AmbientParamArray",
	// "g_AnimSampler",
	// "g_AuraParam",
	// "g_BGAmbientParameter",
	// "g_BGSelectionModelCommonParameter",
	// "g_BGSelectionModelParameter",
	// "g_BushInstancingData",
	// "g_BushNoInstancingData",
	// "g_CameraParameter",
	// "g_CloudShadowMatrix",
	// "g_CloudShadowSampler",
	// "g_CommonParameter",
	// "g_CompositeCommonSampler",
	// "g_ConnectionVertex",
	// "g_CustomizeParameter",
	// "g_DecalColor",
	// "g_DecalParameter",
	// "g_DirectionalShadowParameter",
	// "g_DissolveParam",
	// "g_DissolveSampler",
	// "g_DofLutSampler",
	// "g_DynamicWaveCompostInfo",
	// "g_DynamicWaveObjectParams",
	// "g_DynamicWaveTypeInfo",
	// "g_EadgBias",
	// "g_FakeSpecularParam",
	// "g_FogParameter",
	// "g_FogWeightLutSampler",
	// "g_GeometryParam",
	// "g_GlassOffscreenParam",
	// "g_GrassCommonParam",
	// "g_GrassGridParam",
	// "g_InputConnectionVertex",
	// "g_InputConnectionVertexPrev",
	// "g_InstanceData",
	// "g_InstanceParameter",
	// "g_InstancingData",
	// "g_InstancingMatrix",
	// "g_JointMatrixArray",
	// "g_JointMatrixArrayPrev",
	// "g_LightDirection",
	// "g_LightDrawParam",
	// "g_LightParam",
	// "g_MaterialParam",
	// "g_MaterialParameter",
	// "g_MaterialParameterDynamic",
	// "g_ModelParameter",
	// "g_OmniShadowParam",
	// "g_PSParam",
	// "g_PS_DecalSpecificParameters",
	// "g_PS_DocumentParameters",
	// "g_PS_DofCocParam",
	// "g_PS_InstanceExtraParameters",
	// "g_PS_ModelLightParameters",
	// "g_PS_ModelSpecificParameters",
	// "g_PS_Parameters",
	// "g_PS_ShadowDistance",
	// "g_PS_ShadowParameters",
	// "g_PS_UvTransform",
	// "g_PS_ViewProjectionInverseMatrix",
	// "g_Parameter",
	// "g_PbrParameterCommon",
	// "g_PlateEadg",
	// "g_PrevInstancingMatrix",
	// "g_PreviousInstanceData",
	// "g_PreviousInstancingData",
	// "g_PreviousWavingParam",
	// "g_PreviousWindParam",
	// "g_RoofMatrix",
	// "g_RoofParameter",
	// "g_RoofProjectionMatrix",
	// "g_RoofSampler",
	// "g_Sampler",
	// "g_Sampler0",
	// "g_Sampler1",
	// "g_SamplerAttenuation",
	// "g_SamplerAuraTexture",
	// "g_SamplerAuraTexture1",
	// "g_SamplerAuraTexture2",
	// "g_SamplerCatchlight",
	// "g_SamplerCaustics",
	// "g_SamplerCharaToon",
	// "g_SamplerColor1",
	// "g_SamplerColor2",
	// "g_SamplerColor3",
	// "g_SamplerColor4",
	// "g_SamplerColorMap",
	// "g_SamplerColorMap0",
	// "g_SamplerColorMap1",
	// "g_SamplerDecal",
	// "g_SamplerDepth",
	// "g_SamplerDepthWithWater",
	// "g_SamplerDetailColorMap",
	// "g_SamplerDetailNormalMap",
	// "g_SamplerDiffuse",
	// "g_SamplerDissolveTexture",
	// "g_SamplerDissolveTexture1",
	// "g_SamplerDistortion",
	// "g_SamplerDither",
	// "g_SamplerDynamicWave",
	// "g_SamplerDynamicWavePrev",
	// "g_SamplerDynamicWavePrev2",
	// "g_SamplerEnvMap",
	// "g_SamplerFinalColor",
	// "g_SamplerFlow",
	// "g_SamplerFresnel",
	// "g_SamplerGBuffer",
	// "g_SamplerGBuffer1",
	// "g_SamplerGBuffer2",
	// "g_SamplerGBuffer3",
	// "g_SamplerGBuffer4",
	// "g_SamplerGahter",
	// "g_SamplerGradationMap",
	// "g_SamplerIndex",
	// "g_SamplerLight",
	// "g_SamplerLightDiffuse",
	// "g_SamplerLightSpecular",
	// "g_SamplerMask",
	// "g_SamplerNoise",
	// "g_SamplerNormal",
	// "g_SamplerNormal2",
	// "g_SamplerNormalMap",
	// "g_SamplerNormalMap0",
	// "g_SamplerNormalMap1",
	// "g_SamplerOcclusion",
	// "g_SamplerOmniShadowDynamic",
	// "g_SamplerOmniShadowIndexTable",
	// "g_SamplerOmniShadowStatic",
	// "g_SamplerPalette",
	// "g_SamplerRawDynamicWave",
	// "g_SamplerReflection",
	// "g_SamplerReflectionArray",
	// "g_SamplerReflectionMap",
	// "g_SamplerReflection_",
	// "g_SamplerRefractionMap",
	// "g_SamplerShadow",
	// "g_SamplerShadowMask",
	// "g_SamplerSkinDiffuse",
	// "g_SamplerSkinMask",
	// "g_SamplerSkinNormal",
	// "g_SamplerSpecularMap",
	// "g_SamplerSpecularMap0",
	// "g_SamplerSpecularMap1",
	// "g_SamplerSphareMapCustum",
	// "g_SamplerSphereMap",
	// "g_SamplerSubsurfaceKernel",
	// "g_SamplerTable",
	// "g_SamplerTileNormal",
	// "g_SamplerTileOrb",
	// "g_SamplerToneMapLut",
	// "g_SamplerVPosition",
	// "g_SamplerViewPosition",
	// "g_SamplerWaveMap",
	// "g_SamplerWaveMap1",
	// "g_SamplerWaveletMap0",
	// "g_SamplerWaveletMap1",
	// "g_SamplerWaveletNoise",
	// "g_SamplerWhitecapMap",
	// "g_SamplerWind0",
	// "g_SamplerWind1",
	// "g_SamplerWrinklesMask",
	// "g_ScreenParameter",
	// "g_ShaderTypeParameter",
	// "g_ShadingParameters",
	// "g_ShadowBiasParameter",
	// "g_ShadowMaskParameter",
	// "g_ShapeDeformIndex",
	// "g_ShapeDeformParam",
	// "g_ShapeDeformVertex",
	// "g_SkinMaterialParameter",
	// "g_SkySampler",
	// "g_ToneMapParameter",
	// "g_ToneMapSampler",
	// "g_UnderWaterParam",
	// "g_VSParam",
	// "g_VS_PerInstanceParameters",
	// "g_VS_ViewMatrix",
	// "g_VS_ViewProjectionMatrix",
	// "g_WaterParameter",
	// "g_WavingParam",
	// "g_WetnessParameter",
	// "g_WindInfo",
	// "g_WindParam",
	// "g_WorldMatrix",
	// "g_WorldViewMatrix",
	// "g_WorldViewProjMatrix",
	// "g_WrinklessWeightRate",
}